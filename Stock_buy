
   
    public int maxProfit(int[] prices) {
         int max=0;
Stack<Integer> s;
        s=new Stack<>();
        int[] arr=new int[prices.length];
       
            arr[0]=0; 
             s.push(0);
        
        for(int i=1;i<prices.length;i++)
      {
        
                 if(prices[i]<=prices[s.peek()])
                {
                    arr[i]=i;
                    s.push(i);
                }
                else if(prices[i]>prices[s.peek()])
                {
                    arr[i]=s.peek();
                }
      }
        for(int i=1;i<prices.length;i++)
        {
           max=Math.max(max,prices[i]-prices[arr[i]]);
          
        }
        return max;
    }
//OR
    public int maxProfit(int[] prices) {
        int min=prices[0];
        int max=0;
      for(int i=0;i<prices.length;i++)
      {
          if(prices[i]>min)
          {
              max=Math.max(max,prices[i]-min);
          }
          else 
          {
              min=prices[i];
          }
      }
        return max;
    }
